[user]
        name = {{ full_name }}
        email = {{ git_email }}
[credential]
        helper = osxkeychain
[alias]
        a = add
        ac = !git add -A && git commit
        s = status
        st = stash
        co = checkout
        cob = checkout -b
        cp = cherry-pick
        c = checkout
        ci = commit
        l = log --graph --decorate --oneline --abbrev-commit --all
        h = log --graph --decorate --oneline --abbrev-commit
        amend = commit --amend
        wip = !git add -A && git commit -m "WIP" --no-verify
        br = branch
        rn = branch -m
        delete-tag="!f() { git push --delete ${2-origin} ${1}; git tag -d ${1}; }; f"
        up = !git pull --rebase --prune $@ && git submodule update --init --recursive

        # diff-so-fancy
        # https://github.com/so-fancy/diff-so-fancy/#usage
        df = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"
        dfs = df --staged
        # Get changes for a single commit
        dfc = "!dfc() { git df $1^ $1; }; dfc"

        please = push --force-with-lease
        # publish current branch
        publish = "!f() { git push -u ${1:-origin} $(git rev-parse --abbrev-ref HEAD); }; f"
        pub = publish
        ship = "!f() { git add -A && git commit -m \"$1\" && git push; }; f"

        # Nukes a branch locally and on the origin remote.
        nuke = "!f() { git branch -D $1 && git push origin :$1; }; f"

        # Remove local branches that have been removed upstream
        cleanup = "!git fetch --all -p && git branch -vv | grep \": gone]\" | awk '{ print $1 }' | xargs -n 1 git branch -D"

        # Sync branches and cleanup local branches (depends on above alias)
        sup = "!gh repo sync && git checkout $(git remote show origin | grep 'HEAD branch' | sed 's/.*: //') && git cleanup"

        # http://gggritso.com/human-git-aliases
        unstage = reset -q HEAD --
        uns = unstage
        discard = checkout --
        dis = discard
        uncommit = reset --mixed HEAD~
        unc = uncommit

        url = "!f() { sha=$(git rev-parse ${1:-HEAD}); gh browse $sha -n; }; f"

        # Copy current branch name to clipboard (macOS only)
        cb = "!git rev-parse --abbrev-ref HEAD | tr -d '\n' | pbcopy"

        # Slightly quicker way to credit an author on the latest commit.
        # Usage: git credit "Steven Loria" git@stevenloria.com
        credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD }; f"

        # Set up your branch to track a remote branch. Assumes you mean `origin/$branch-name`.
        track = "!f() { branch=$(git rev-parse --abbrev-ref HEAD); git branch $branch --set-upstream-to origin/$branch }; f"

[color]
        diff = auto
        status = auto
        branch = auto
        ui = true
[core]
        excludesfile = ~/.gitignore_global
        attributesfile = ~/.gitattributes_global
        editor = vim
[apply]
        whitespace = nowarn
[mergetool]
        keepBackup = false
[difftool]
        prompt = false
[pull]
        rebase = true
[push]
        autoSetupRemote = false
[filter "lfs"]
        clean = git-lfs clean -- %f
        smudge = git-lfs smudge -- %f
        process = git-lfs filter-process
        required = true
[github]
        user = {{ git_user }}

[init]
        defaultBranch = main
